// app.openWindow("MainWindow");
var width = 70;
var height = 20;
var jdict;

const plugins = {};

app.parse("%appdata/plugins/active.txt").trim().split(/\s+/).forEach(function(plugin){
    console.log("Loading plugin ", plugin);
    eval(app.parse("%appdata/plugins/" + plugin + ".txt"));
});

const style = {
    sep:app.shell("tput setaf 3"),
    kana:app.shell("tput setaf 6"),
    tx:app.shell("tput setaf 8"),
    reset:app.shell("tput sgr0")
};

console.styled = function() {
    var line = "";
    for (var i = 0; i < arguments.length; ++i) {
        line += arguments[i];
    }
    line = line.replace(/\{([a-z]+)\{([^}]+)\}\}/g, function(m, k, t){return style[k] + t + style.reset;});
    console.logRaw(line);
};

function clearScreen() {
    console.logRaw("\033[1;1H\033[2J")
}

function Reader(bookName, language, bookmark, lineSource){
    var bookFilePath = "%appdata/books/" + bookName + "-" + language + ".txt";
    var lines = (app.parse(bookFilePath) || "")
        .split("\n")
        .filter(function(line){return line.trim().length > 0;});
    var position = 0;
    var column = -1;
    var columnCount = 0;
    var dict, pluginSet;
    var lastTranslation;
    var currentEntry, currentEntryKey;
    var selection = {};
    var selectionDefaults = {};
    var advance = false;
    var exploded;
    var translator;

    if (language in bookmark) {
        position = bookmark[language].position|0;
        selection = bookmark[language].selection;
        selectionDefaults = bookmark[language].selectionDefaults;
        if (!selection || typeof selection != "object")
            selection = {};
        if (!selectionDefaults || typeof selectionDefaults != "object")
            selectionDefaults = {};
    }

    if (lines.length == 0 && lineSource) {
        lines = lineSource.lines().map(function(){return "{@}";});
    }

    if (lines.length == 0) {
        console.log("could not read %appdata/books/" + bookName + "-" + language + ".txt");
    }

    function save() {
        app.write(bookFilePath, lines.join("\n"));
    }

    if (plugins[language]) {
        pluginSet = plugins[language];
        dict = pluginSet.dictionary;
        if (typeof dict == "function") {
            dict = new dict();
        }
    }

    if (lineSource) {
        if (typeof plugins[lineSource.language() + "-" + language] == "function") {
            plugins[lineSource.language() + "-" + language] = new plugins[lineSource.language() + "-" + language]();
        }
        translator = plugins[lineSource.language() + "-" + language];
    }

    this.pluginSet = pluginSet;

    this.language = function() {return language;};

    this.lines = function() {return lines;};

    this.lineCount = function() {
        return lines.length;
    };

    this.empty = function(){
        return lines.length == 0;
    };

    this.bookmark = function(obj) {
        obj[language] = {
            position,
            selection,
            selectionDefaults
        };
    };

    this.position = function() {
        return position;
    };

    this.setPosition = function(np) {
        position = np;
        column = -1;
    };

    this.move = function(dir) {
        var moveType = "word";
        if (dir < 0 && column <= 0) {
            if (!this.prev())
                return false;
            this.printTranslation();
            column = columnCount;
            return "line";
        } else if (dir > 0 && column >= columnCount) {
            if (!this.next())
                return false;
            moveType = "line";
        } else {
            column += dir;
        }
        this.printTranslation();
        return moveType;
    };

    this.next = function() {
        column = -1;
        position++;
        if (position < lines.length) {
            if (translator && translator.isFree && lines[position] == "{@}")
                this.current();
            return true;
        }
        position = lines.length - 1;
        return false;
    };

    this.prev = function() {
        column = -1;
        position--;
        if (position >= 0)
            return true;
        position = 0;
        return false;
    };

    this.current = function(retranslate) {
        var ret = lines[position];
        if (typeof ret != "string")
            ret = "";
        if ((ret == "{@}" || retranslate) && lineSource) {
            ret = lineSource.current();
            var name = lineSource.language() + "-" + language;
            if (translator && translator.translate) {
                ret = translator.translate(ret, retranslate);
                if (translator.cache !== false) {
                    lines[position] = ret;
                    save();
                }
            } else {
                ret = language + " <= " + lineSource.language() + ": " + ret;
            }
        }
        return ret || "";
    };

    this.edit = function() {
        var acc = 0;
        for (var i = 0; i < column && i < exploded.length; ++i){
            var word = Object.keys(exploded[i])[0];
            acc += word.length;
        }
        var line = this.current();
        if (line[acc + 1] == ' ') {
            lines[position] = line.substr(0, acc + 1) + line.substr(acc + 2);
        } else {
            lines[position] = line.substr(0, acc + 2) + " " + line.substr(acc + 2);
        }
        save();
        this.print();
    };

    this.print = function(doAdvance) {
        advance = doAdvance === true;
        clearScreen();
        if (!dict) {
            write(this.current().split(" ").map(function(f){return f + " ";}));
        } else {
            dictprint(this.current());
        }
        advance = false;
    };

    this.printTranslation = function(cycle) {
        this.print(cycle && lastTranslation == currentEntry);
        if (!currentEntry)
            return;
        console.log("\n");
        var variant = getNextVariant(currentEntry);
        lastTranslation = currentEntry;
        printCentered(variant.$.map(function(f){return "{tx{" + f + "}}";}).join(' {sep{/}} '));
    };

    function dictprint(src) {
        exploded = dict.lookUp(src);
        columnCount = exploded.length;
        var out = [];
        exploded.forEach(function(entry, i){
            var word = Object.keys(entry)[0];
            var chunk;
            if (i != column) {
                chunk = " " + word + " ";
            } else {
                currentEntry = entry;
                currentEntryKey = word;
                var chosen = word;
                var variant = getNextVariant(entry);
                for (var k in variant) {
                    if (k[0] != "$" && variant[k] === 1) {
                        chosen = k;
                        break;
                    }
                }
                chunk = "{sep{[}}";
                if (chosen != word) {
                    chunk += word + "{sep{:}}{kana{" + chosen + "}}";
                } else {
                    chunk += chosen;
                }
                chunk += "{sep{]}}";
            }
            out.push(chunk);
        });

        write(out);
    }

    function write(words) {
        (app.shell("stty size")+"").replace(/([0-9]+) ([0-9]+)/, function(m, h, w){
            width = (w|0) || width;
            height = (h|0) || height;
        });

        var lines = [""];
        words.forEach(function(word){
            var lastLine = lines[lines.length - 1];
            if (textWidth(lastLine) + textWidth(word) >= width) {
                lines[lines.length - 1] = lastLine + "\n";
                lines.push(word);
            } else {
                lines[lines.length - 1] = lastLine + word;
            }
        });

        for (var i = 0; i < height / 2 - lines.length / 2; ++i)
            console.log(i == 0 ? position + "." : "");

        lines.forEach(printCentered);
    }

    function textWidth(line) {
        line = line.replace(/\{([a-z]+)\{([^}]+)\}\}/g, function(m, k, t){return t;});
        var len = 0;
        for (var i = 0; i < line.length; ++i) {
            var cc = line.charCodeAt(i);
            len += 1 + (cc > 128);
        }
        return len;
    }

    function printCentered(line) {
        var len = textWidth(line);
        var w = width/2 - len/2;
        if (w > 0)
            console.logRaw(" ".repeat(w));
        console.styled(line);
    }

    function getNextVariant(entry) {
        if (advance === undefined)
            advance = true;
        var blankCount = 0;
        for (var i = 0; i < column; ++i) {
            blankCount += (Object.keys(exploded)[0] == " ")|0;
        }
        var variants = Object.values(entry)[0];
        var selected = selection[position + "x" + (column - blankCount)];
        if (selected === undefined) {
            selected = selectionDefaults[currentEntryKey]|0;
        }
        if (variants.length && advance) {
            selected = (selected + 1) % variants.length;
            if (selected) {
                selection[position + "x" + (column - blankCount)] = selected;
                selectionDefaults[currentEntryKey] = selected;
            } else {
                delete selection[position + "x" + (column - blankCount)];
                delete selectionDefaults[currentEntryKey];
            }
        }
        return variants.length ? variants[Math.min(variants.length - 1, selected)] : {$:[]};
    }
}

Object.values = function(obj) {
    if (!obj || typeof obj != "object")
        return [];
    var ret = [];
    for (var k in obj) {
        ret.push(obj[k]);
    }
    return ret;
};

Object.find = function(obj, cb) {
    if (!obj || typeof obj != "object")
        return undefined;
    for (var k in obj) {
        if (cb(k, obj[k])) {
            return obj[k];
        }
    }
};

Array.find = function(arr, cb) {
    if (!arr || typeof arr != "object")
        return undefined;
    for (var i = 0, max = arr.length; i < max; ++i) {
        if (cb(arr[i])) {
            return arr[i];
        }
    }
};

try {
    // readBook("tsuki");
    // readBook("n6078fg_0");
    browse();
} catch(ex) {
    console.log("Crash:", ex.message, ex.stack);
}

function browse() {
    var sources = {};
    var activeSource = "";
    var help = [
        function(){
            return ["  q or quit: quit yomu reader"];
        },
        function(){
            var ret = ["  s [name] or source [name]: use source. The available sources are:"];
            for (var k in sources) {
                ret.push("    " + k);
            }
            return ret;
        }
    ];

    JSON.parse(app.parse("%appdata/sources.json")).forEach(loadSource);

    while (true) {
        var input = console.input(activeSource + "> ").trim().split(/\s+/);
        var cmd = input[0].toLowerCase();
        switch (cmd) {
        case "quit":
        case "q":
            return;

        case "t":
            var deepl = plugins["jp-en"];
            var text = deepl.translate("昼も夜もわからないこの洞窟の中じゃ、どれくらい時間が経ったのかわからない。");
            console.log(text);
            break;

        case "dict":
            new JDict(true);
            break;

        case "source":
        case "s":
            if (input[1] in sources) {
                activeSource = input[1];
                console.log("Using source \"" + input[1] + "\".");
            } else {
                console.log("Invalid source \"" + input[1] + "\".");
            }
            break;

        default:
            if (sources[activeSource] && typeof sources[activeSource][cmd] == "function") {
                sources[activeSource][cmd].apply(sources[activeSource], input.slice(1));
                break;
            }
            console.log("Unknown command " + cmd);

        case "h":
        case "help":
            help.forEach(function(f){
                var lines = f().join("\n");
                if (lines)
                    console.log(lines);
            });
            break;
        }
    }

    function loadSource(name) {
        var src = app.parse("%appdata/sources/" + name + ".txt");
        if (typeof src != "string") {
            console.log("Could not load source " + name);
            return;
        }

        var inst = eval(src);
        if (!inst || typeof inst != "object") {
            console.log("Invalid source " + name);
            return;
        }

        sources[name] = inst;

        if (inst.help) {
            help.push(function(){
                return (activeSource == name) ? inst.help() : []
            });
        }
    }
}

function readBook(bookName) {
    var cmd = "l";
    var cmdcc;
    var currentLanguage = "en";
    var languages = {jp:null, en:null};
    var bookmark = {};

    try {
        var bookmarksrc = app.parse("%appdata/books/" + bookName + "-bookmark.json");
        if (bookmarksrc) {
            bookmark = JSON.parse(bookmarksrc);
        }
    } catch(ex) {
        console.input("Creating new bookmark for " + bookName);
    }

    while (true) {
        outer: switch (cmd) {
        case 'q':
            var bookmark = {};
            for (var k in languages) {
                if (languages[k]) {
                    languages[k].bookmark(bookmark);
                }
            }
            app.write("%appdata/books/" + bookName + "-bookmark.json", JSON.stringify(bookmark, 0, 4));

            clearScreen();
            return;

        case 'print':
        case ' ':
            languages[currentLanguage].print(cmd == ' ');
            break;

        case 'i':
            languages[currentLanguage].edit();
            break;

        case String.fromCharCode(61):
            languages[currentLanguage].next();
            cmd = 'print';
            continue;
        case String.fromCharCode(45):
            languages[currentLanguage].prev();
            cmd = 'print';
            continue;

        case '\n':
        case 'n':
            for (var k in languages) {
                if (languages[k] && !languages[k].next() && k == currentLanguage) {
                    return "nextbook";
                }
            }
            cmd = 'print';
            continue;

        case 'p':
            for (var k in languages) {
                if (languages[k] && !languages[k].prev() && k == currentLanguage) {
                    return "previousbook";
                }
            }
            cmd = 'print';
            continue;

       case 'T':
            languages[currentLanguage].current(true);
            cmd = 'print';
            continue;

       case 't':
            languages[currentLanguage].printTranslation(true);
            break;

        case 'l':
            cmd = "q";
            var languageList = Object.keys(languages);
            for (var i = 0; i < languageList.length; ++i) {
                if (languageList[i] == currentLanguage) {
                    setLanguage(languageList[(i + 1) % languageList.length]);
                    break;
                }
            }
            if (cmd != "print")
                setLanguage(currentLanguage);
            continue;

        case 'f':
        case 'j':
        case 'b':
            var dir = cmd == 'f' ? 1 : -1;
            var moved = languages[currentLanguage].move(dir);
            if (moved == false) {
                return dir == 1 ? "nextbook": "prevbook";
            }
            if (moved == "line") {
                for (var key in languages) {
                    if (key != currentLanguage && languages[key]) {
                        if (dir == 1) {
                            languages[key].next();
                        } else {
                            languages[key].prev();
                        }
                    }
                }
            }
            break;

        case 'h':


        case String.fromCharCode(27):
            switch ((cmdcc = console.getChar(true))) {
            case 91:
                switch (cmdcc = console.getChar(true)) {
                case 65: cmd = "p"; continue; // up
                case 67: cmd = "f"; continue; // right
                case 66: cmd = "n"; continue; // down
                case 68: cmd = "b"; continue; // left
                default:
                    break;
                }
                break;
            case 27:
                cmd = "l";
                continue;
            case 'f'.charCodeAt(0):
                cmd = 't';
                continue;
            case 'j'.charCodeAt(0):
                cmd = 'i';
                continue;
            default:
            }

        default:
            var pluginSet = languages[currentLanguage].pluginSet;
            if (pluginSet && typeof pluginSet["press:" + cmd] == "function") {
                pluginSet["press:" + cmd]({
                    source:languages[currentLanguage]
                })
            } else {
                console.log("Dunno what " + cmdcc + " is.");
            }
        }
        cmdcc = console.getChar(true);
        cmd = String.fromCharCode(cmdcc);
    }

    function setLanguage(language) {
        if (languages[currentLanguage])
            clearScreen();
        if (!languages[language]) {
            var reader = new Reader(bookName, language, bookmark, languages[currentLanguage]);
            if (reader.empty()) {
                return;
            }
            languages[language] = reader;
            if (languages[currentLanguage]) {
                languages[language].setPosition(languages[currentLanguage].position());
            }
        }
        currentLanguage = language;
        cmd = "print";
    }
}

function char(str) {
    return str.charCodeAt(0);
}
